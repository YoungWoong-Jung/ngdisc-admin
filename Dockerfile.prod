# =================================================================
# 1단계: 빌드 환경 (Builder - 앱을 '요리'하는 공간)
# =================================================================
# Node.js 20 버전이 설치된 가벼운 리눅스(alpine) 환경을 기반으로 시작합니다.
# 이 환경의 별명을 'builder'라고 짓습니다.
FROM node:20-alpine AS builder

# 컨테이너 안에서 작업할 폴더를 '/app'으로 지정합니다.
# 앞으로의 모든 명령어는 이 폴더 안에서 실행됩니다.
WORKDIR /app

# 가장 먼저 'package.json'과 'package-lock.json' 파일을 복사합니다.
# 이 파일들에는 어떤 라이브러리가 필요한지 목록이 들어있습니다.
COPY package*.json ./

# 목록에 있는 라이브러리들을 모두 설치합니다.
# (이 과정을 분리하면, 나중에 코드만 수정했을 때 설치를 건너뛰어 빌드 속도가 빨라집니다.)
RUN npm install

# 이제 나머지 모든 소스 코드(pages, components 등)를 복사합니다.
COPY . .

# Next.js 프로젝트를 실행 가능한 형태로 '빌드(요리)'합니다.
# 이 과정이 끝나면 .next 폴더에 결과물이 생성됩니다.
RUN npm run build

# =================================================================
# 2단계: 프로덕션 환경 (Production - 완성된 앱을 '실행'하는 공간)
# =================================================================
# 다시 깨끗하고 가벼운 Node.js 20 환경에서 시작합니다.
FROM node:20-alpine

# 똑같이 작업 폴더를 '/app'으로 지정합니다.
WORKDIR /app

# 1단계('builder')에서 만들어진 결과물들만 쏙쏙 골라서 가져옵니다.
# 개발에만 필요했던 소스 코드나 도구들은 버리고, 실행에 필요한 최소한의 것들만 챙깁니다.
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/next.config.mjs ./next.config.mjs

# 앱 실행에 필요한 라이브러리만 다시 설치합니다. (개발용 라이브러리는 제외)
RUN npm install --production

# 이 컨테이너는 4500번 포트를 외부에 노출할 준비가 되어 있음을 알립니다.
# 실제 Next.js는 4500 포트에서 실행됩니다)
EXPOSE 4500

CMD ["npm", "run", "start"]